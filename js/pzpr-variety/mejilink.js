/*! @license pzpr.js v7f9addbe (c) 2009-2025 sabo2, MIT license
 *   https://github.com/sabo2/pzprv3 */
!function(e,t){"object"==typeof module&&module.exports?module.exports=[e,t]:pzpr.classmgr.makeCustom(e,t)}(["mejilink"],{MouseEvent:{inputModes:{edit:["info-line"],play:["line","peke","info-line"]},mouseinput_auto:function(){this.puzzle.playmode?"left"===this.btn?this.mousestart||this.mousemove?this.inputLine():this.mouseend&&this.notInputted()&&(this.prevPos.reset(),this.inputpeke()):"right"===this.btn&&(this.mousestart||this.mousemove)&&this.inputpeke():this.puzzle.editmode&&(this.mousestart||this.mousemove)&&this.inputborder()}},Border:{ques:1,enableLineNG:!0,isGround:function(){return 0<this.ques},isLineNG:function(){return 1===this.ques}},BorderList:{allclear:function(e){for(var t=["ques","line","qsub"],i=0;i<this.length;i++)for(var n=this[i],r=0;r<t.length;r++){var o=t[r],s=n.constructor.prototype[o];"ques"===o&&(s=n.inside?1:0),n[o]!==s&&(e&&n.addOpe(o,n[o],s),n[o]=s)}}},Board:{cols:8,rows:8,hasborder:2,borderAsLine:!0,addExtraInfo:function(){this.tilegraph=this.addInfoList(this.klass.AreaTileGraph)},initBoardSize:function(e,t){this.common.initBoardSize.call(this,e,t),this.border.allclear(!1)}},LineGraph:{enabled:!0},"AreaTileGraph:AreaGraphBase":{enabled:!0,relation:{"border.ques":"separator"},setComponentRefs:function(e,t){e.tile=t},getObjNodeList:function(e){return e.tilenodes},resetObjNodeList:function(e){e.tilenodes=[]},isnodevalid:function(e){return!0},isedgevalidbylinkobj:function(e){return e.isGround()}},Graphic:{gridcolor_type:"LIGHT",margin:.5,paint:function(){this.drawBGCells(),this.drawDashedGrid(!1),this.drawBorders(),this.drawLines(),this.drawBaseMarks(),this.drawPekes()},getBorderColor:function(e){return 1===e.ques?(e=e.sidecell[1]).isnull||0===e.error?"white":this.errbcolor1:null},repaintParts:function(e){this.range.crosses=e.crossinside(),this.drawBaseMarks()}},Encode:{decodePzpr:function(e){this.decodeMejilink()},encodePzpr:function(e){this.encodeMejilink()},decodeMejilink:function(){for(var e=this.outbstr,t=this.board,i=[16,8,4,2,1],n=e?Math.min((t.border.length+4)/5|0,e.length):0,r=0,o=0;o<n;o++)for(var s=parseInt(e.charAt(o),32),d=0;d<5;d++)t.border[r]&&(t.border[r].ques=s&i[d]?1:0,r++);this.outbstr=e.substr(n)},encodeMejilink:function(){for(var e=0,t=this.board,i=2*t.cols*t.rows-t.cols-t.rows,n=i;n<t.border.length;n++)t.border[n].isGround()&&e++;for(var r=0,o=0,s="",d=[16,8,4,2,1],n=0,u=0===e?i:t.border.length;n<u;n++)t.border[n].isGround()&&(o+=d[r]),5===++r&&(s+=o.toString(32),o=r=0);0<r&&(s+=o.toString(32)),this.outbstr+=s}},FileIO:{decodeData:function(){this.decodeBorder(function(e,t){"2"===t?(e.ques=0,e.line=1):"-1"===t?(e.ques=0,e.qsub=2):e.ques="1"===t?0:1})},encodeData:function(){this.encodeBorder(function(e){return 1===e.line?"2 ":2===e.qsub?"-1 ":0===e.ques?"1 ":"0 "})}},AnsCheck:{checklist:["checkBranchLine","checkCrossLine","checkDotLength","checkDeadendLine","checkOneLoop"],checkDotLength:function(){for(var e=this.board,t=e.tilegraph.components,i=999999,n=0;n<t.length;n++)t[n].count=0;for(var r=0;r<e.border.length;r++){var o=e.border[r],s=o.sidecell[0],d=o.sidecell[1];o.isGround()&&!o.inside?(s.isnull||(s.tile.count-=i),d.isnull||(d.tile.count-=i)):o.isGround()||o.isLine()||(s.isnull||s.tile.count++,d.isnull||d.tile.count++)}for(n=0;n<t.length;n++){var u=t[n].clist,l=t[n].count;if(!(l<0||l===u.length)){if(this.failcode.add("bkNoLineNe"),this.checkOnly)break;u.seterr(1)}}}}});
//# sourceMappingURL=mejilink.js.map
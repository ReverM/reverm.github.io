/*! @license pzpr.js v7f9addbe (c) 2009-2025 sabo2, MIT license
 *   https://github.com/sabo2/pzprv3 */
!function(e,t){"object"==typeof module&&module.exports?module.exports=[e,t]:pzpr.classmgr.makeCustom(e,t)}(["nothree"],{MouseEvent:{RBShadeCell:!0,use:!0,inputModes:{edit:["circle-unshade","info-blk"],play:["shade","unshade","peke","info-blk"]},inputFixedNumber:function(){this.inputdot()},inputdot:function(){var e,t=this.getpos(.25);this.prevPos.equals(t)||(null!==(e=t.getDot())&&(e.setDot(1!==e.getDot()?1:0),e.draw()),this.prevPos=t)},autoplay_func:"cellpeke",mouseinputAutoEdit:function(){this.mousestart&&this.inputdot()}},KeyEvent:{enablemake:!0,moveTarget:function(e){return this.moveTBorder(e)},keyinput:function(e){this.key_inputdot(e)},key_inputdot:function(e){var t=this.cursor.getDot();null!==t&&("1"===e?t.setDot(1):" "!==e&&"-"!==e&&"0"!==e||t.setDot(0),t.draw())}},Cell:{qnum:0,minnum:0,dotCells:function(){return new this.klass.CellList([this])}},Cross:{qnum:0,minnum:0,dotCells:function(){var e=this.bx,t=this.by;return this.board.cellinside(e-1,t-1,e+1,t+1)}},Border:{qnum:0,minnum:0,dotCells:function(){return new this.klass.CellList(this.sidecell)},prehook:{qsub:function(e){return e&&this.qnum}},posthook:{qnum:function(e){e&&this.setQsub(0)}}},Board:{hascross:1,hasborder:1,hasdots:1},Dot:{setDot:function(e){this.puzzle.opemgr.disCombine=!0,this.piece.setQnum(e),this.puzzle.opemgr.disCombine=!1}},AreaUnshadeGraph:{enabled:!0},Graphic:{gridcolor_type:"LIGHT",shadecolor:"#444444",enablebcolor:!0,bgcellcolor_func:"qsub1",paint:function(){this.drawBGCells(),this.drawGrid(),this.drawShadedCells(),this.drawDots(),this.drawChassis(),this.drawPekes(),this.drawCursor(!1,this.puzzle.editmode)},getDotRadius:function(){return.16}},Encode:{decodePzpr:function(e){this.decodeDot()},encodePzpr:function(e){this.encodeDot()}},FileIO:{decodeData:function(){this.decodeDotFile(),this.decodeCellAns(),this.decodeBorderLine()},encodeData:function(){this.encodeDotFile(),this.encodeCellAns(),this.encodeBorderLineIfPresent()}},AnsCheck:{checklist:["checkShadeCellExist","checkAdjacentShadeCell","checkShadeOverNum","checkConnectUnshadeRB","checkThree","checkShadeLessNum","doneShadingDecided"],checkShadeOverNum:function(){for(var e=this.board,t=0;t<e.cross.length;t++){var s=e.cross[t];if(1===s.qnum){var o=s.dotCells().filter(function(e){return e.isShade()});if(!(o.length<2)){if(this.failcode.add("csGt1"),this.checkOnly)break;o.seterr(1),s.seterr(1)}}}},checkShadeLessNum:function(){for(var e=this.board,t=0;t<e.dotsmax;t++){var s=e.dots[t];if(1===s.getDot()&&!s.piece.dotCells().some(function(e){return e.isShade()})){if(this.failcode.add("csLt1"),this.checkOnly)break;s.piece.seterr(1),s.piece.dotCells().seterr(1)}}},checkThree:function(){this.checkRowsCols(this.checkThreeRow,"csDistance")},checkThreeRow:function(e){for(var t=[],s=!0,o=0;o<e.length;o++)e[o].isUnshade()||(t.push(e[o]),3<t.length&&t.splice(0,1),3===t.length&&(t[0].bx===t[1].bx?t[2].by-t[1].by==t[1].by-t[0].by:t[2].bx-t[1].bx==t[1].bx-t[0].bx)&&(s=!1,t[0].board.cellinside(t[0].bx,t[0].by,t[2].bx,t[2].by).seterr(1)));return s}}});
//# sourceMappingURL=nothree.js.map
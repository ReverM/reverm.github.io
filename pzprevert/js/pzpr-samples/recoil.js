/*! @license pzpr.js v7f9addbe (c) 2009-2025 sabo2, MIT license
 *   https://github.com/sabo2/pzprv3 */
ui.debug.addRules("recoil",[{rules:"Draw a path from the diamond cell that visits several cells in the grid.\n1. The path cannot branch off or revisit a cell it has visited before.\n2. Every time the path enters a cell, an obstacle is placed in the first available cell in the opposite direction. This cell may skip over gaps in the grid, other obstacles, or cells that were previously visited by the path.\n3. The path cannot enter a cell if the corresponding obstacle can't be placed inside the grid.\n4. All cells must be used by a line or an obstacle.",history:"This genre was invented by Sebastian Simon and was first posted on Logic Masters Germany."},{rules:"",history:""}]),ui.debug.addDebugData("recoil",{url:"8/6/32rt007ovrvc",failcheck:[["lnBranch","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 1 1 1 1 0 /0 0 0 1 0 0 0 0 0 /0 0 0 0 0 1 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 1 1 0 0 0 /0 0 0 0 1 0 0 0 /0 0 0 0 0 1 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["lnCross","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 1 1 1 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 0 1 0 0 0 /0 0 0 0 1 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["haisuSG","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 1 1 0 0 0 0 /0 1 1 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /1 0 1 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["lnNotValid","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 1 0 0 0 /0 0 0 1 1 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 0 1 1 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["lnOnShade","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 1 0 0 0 /0 0 0 1 1 0 0 0 0 /0 0 0 0 0 1 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 0 0 1 0 0 /0 0 0 0 1 1 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["unusedCell","pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 1 1 0 0 /0 0 0 1 1 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 0 1 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"],["lnPlLine","pzprv3/recoil/3/5/3 3/# # . . . /. . . . . /. . . . . /0 0 0 0 0 0 /0 0 1 0 1 0 /0 1 1 0 0 0 /0 0 0 0 0 /0 0 0 1 1 /0 0 1 0 0 /0 0 0 0 0 /0 0 0 0 0 /0 0 0 0 0 /0 0 0 0 0 /",{skiprules:!0}],["laOnBorder","pzprv3/recoil/3/3/3 3/# . . /. . . /. . . /0 1 0 0 /0 0 0 0 /0 0 0 0 /0 0 0 /0 1 0 /0 0 0 /0 0 0 /0 0 0 /0 0 0 /0 0 0 /",{skiprules:!0}],[null,"pzprv3/recoil/6/8/5 3/# # . # # # # # /. # . . . . . . /. . . . . . # # /# # # . . . # # /# # # # # . # # /# # # # # . # # /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 1 1 0 /0 0 0 1 1 0 0 0 0 /0 0 0 0 0 1 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 1 0 0 1 0 0 /0 0 0 0 1 1 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /0 0 0 0 0 0 0 0 /"]],inputs:[{input:["newboard,2,4","editmode"],result:"pzprv3/recoil/4/2/1 3/. . /. . /. . /. . /0 0 0 /0 0 0 /0 0 0 /0 0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /"},{input:["mouse,left,1,3,3,5","mouse,left,1,5,3,5,3,7"],result:"pzprv3/recoil/4/2/3 5/. . /. . /# . /. # /0 0 0 /0 0 0 /0 0 0 /0 0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /0 0 /"},{input:["playmode","mouse,left,3,5,3,3,1,3,1,1","mouse,left,1,7"],result:"pzprv3/recoil/4/2/3 5/. . /. . /# . /. # /0 0 0 /0 1 0 /0 0 0 /0 0 0 /0 0 /1 0 /0 1 /0 0 /0 0 /0 0 /0 0 /0 0 /1 0 /"},{input:["mouse,right,3,1","mouse,right,3,2","mouse,right,3,3,3,5"],result:"pzprv3/recoil/4/2/3 5/. . /. . /# . /. # /0 0 0 /0 1 0 /0 0 0 /0 0 0 /0 0 /1 -1 /0 1d /0 0 /0 0 /0 2 /0 0 /0 0 /1 0 /"}]});
//# sourceMappingURL=recoil.js.map